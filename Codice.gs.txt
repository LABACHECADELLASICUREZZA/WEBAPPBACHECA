// ==========================
// Code.gs - Script principale
// ==========================

// Mostra l'interfaccia HTML
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setSandboxMode(HtmlService.SandboxMode.IFRAME)
    .setTitle('Ricerca Pubblicazioni');
}

// Include file HTML/JS/CSS
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

// ==========================
// Ricerca pubblicazioni
// ==========================
function cercaPublicazioni(codiceDitta, codiceDipendente) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let risultati = [];
    let tipo = '';

    // --- RICERCA PER DITTA TEMPORANEAMENTE DISABILITATA ---
    /*
    if (codiceDitta && codiceDitta.trim() !== '') {
      const foglio = ss.getSheetByName('PUBBLICAZIONI DITTE');
      if (!foglio) throw new Error('Foglio "PUBBLICAZIONE DITTE" non trovato');

      const dati = foglio.getDataRange().getValues();
      if (dati[0].length < 12) throw new Error('Il foglio deve avere almeno 12 colonne (A-L)');

      for (let i = 1; i < dati.length; i++) {
        if (dati[i][0]?.toString().trim() === codiceDitta.toString().trim()) {
          const stato = dati[i][10] || '';
          risultati.push({
            idPubblicazione: dati[i][2], // IDPUBBLICAZIONE in colonna C
            ditta: dati[i][3] || '',
            genere: dati[i][6] || '',
            titolo: dati[i][7] || '',
            versione: dati[i][8] || '',
            link: dati[i][9] || '',
            stato: stato,
            lettura: dati[i][11] || '',
            isLetto: stato.toString().toLowerCase().startsWith('letto')
          });
        }
      }
      tipo = 'ditta';
    }
    */

    // --- Ricerca per IDDIPENDENTE ---
    else if (codiceDipendente && codiceDipendente.trim() !== '') {
      const foglio = ss.getSheetByName('PUBBLICAZIONI DIPENDENTE');
      if (!foglio) throw new Error('Foglio "PUBBLICAZIONI DIPENDENTE" non trovato');

      const dati = foglio.getDataRange().getValues();
      if (dati[0].length < 14) throw new Error('Il foglio deve avere almeno 14 colonne (A-N)');

      for (let i = 1; i < dati.length; i++) {
        if (dati[i][0]?.toString().trim() === codiceDipendente.toString().trim()) {
          const stato = dati[i][12] || '';
          risultati.push({
            idPubblicazione: dati[i][2], // IDPUBBLICAZIONE in colonna C
            ditta: dati[i][3] || '',
            nominativo: dati[i][5] || '',
            titolo: dati[i][9] || '',
            versione: dati[i][10] || '',
            link: dati[i][11] || '',
            stato: stato,
            lettura: dati[i][13] || '',
            isLetto: stato.toString().toLowerCase().startsWith('letto')
          });
        }
      }
      tipo = 'dipendente';
    }

    return {
      successo: true,
      risultati,
      tipo,
      messaggio: risultati.length > 0 ? `Trovati ${risultati.length} risultati` : 'Nessun risultato trovato'
    };

  } catch (error) {
    console.error('Errore nella ricerca:', error);
    return { successo: false, errore: error.message, risultati: [], tipo: '' };
  }
}

// ==========================
// Aggiorna stato "letto" in base a IDPUBBLICAZIONE
// ==========================
function aggiornaStatoLetto(idPubblicazione) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const now = new Date();
    const dataOra = Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm');
    const nuovoStato = `letto ${dataOra}`;

    // Cerca su entrambi i fogli
    const fogli = [
      { nome: 'PUBBLICAZIONI DITTE', colStato: 10 },      // Colonna K
      { nome: 'PUBBLICAZIONI DIPENDENTE', colStato: 12 }  // Colonna M
    ];

    for (const { nome, colStato } of fogli) {
      const foglio = ss.getSheetByName(nome);
      if (!foglio) continue;

      const dati = foglio.getDataRange().getValues();
      for (let i = 1; i < dati.length; i++) {
        const cellValue = dati[i][2]; // Colonna C = IDPUBBLICAZIONE
        if (cellValue && cellValue.toString().trim() === idPubblicazione.toString().trim()) {
          const statoAttuale = dati[i][colStato] || '';
          if (statoAttuale.toString().toLowerCase().startsWith('letto')) {
            return {
              successo: false,
              errore: 'GiÃ  marcato come letto',
              nuovoStato: statoAttuale
            };
          }
          foglio.getRange(i + 1, colStato + 1).setValue(nuovoStato);
          return {
            successo: true,
            messaggio: `Stato aggiornato a: ${nuovoStato}`,
            nuovoStato
          };
        }
      }
    }

    return { successo: false, errore: 'IDPUBBLICAZIONE non trovata' };

  } catch (error) {
    console.error('Errore nell\'aggiornamento dello stato:', error);
    return { successo: false, errore: error.message };
  }
}